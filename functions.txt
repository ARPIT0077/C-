*function*
-> More organised by breaking into small chunks.
-> Execute only , when it is called

SYNTAX
return type  function_name(parameters){
 // bunch of the instructions

 // return value (optional)

}
(have to call excitely)

function call -> the type of function followed by the parenthesis
 and a semi colon;

EX 
void play_music(){

    cout << "play_music";
}
play_music(); 'call done in the main function'

*PARAMETERS*
Information can be passed to functions as a parameter. Parameters act as variables inside the function.

Parameters are specified after the function name, inside the parentheses. You can add as many
 parameters as you want, just separate them with a comma:

 void functionName(parameter1, parameter2, parameter3) {
  // code to be executed
}

EXvoid myFunction(string fname) {
  cout << fname << " Refsnes\n";
}

int main() {
  myFunction("Liam");
  myFunction("Jenny");
  myFunction("Anja");
  return 0;
}

*Default Parameter Value*
You can also use a default parameter value, by using the equals sign (=).

If we call the function without an argument, it uses the default value ("Norway"):

EX 
void myFunction(string country = "Norway") {
  cout << country << "\n";
}

int main() {
  myFunction("Sweden");
  myFunction("India");
  myFunction();
  myFunction("USA");
  return 0;
}

// Sweden
// India
// Norway
// USA

*Multiple Parameters*
Inside the function, you can add as many parameters as you want:

Ex
void myFunction(string fname, int age) {
  cout << fname << " Refsnes. " << age << " years old. \n";
}

int main() {
  myFunction("Liam", 3);
  myFunction("Jenny", 14);
  myFunction("Anja", 30);
  return 0;
}

// Liam Refsnes. 3 years old.
// Jenny Refsnes. 14 years old.
// Anja Refsnes. 30 years old.

*Return Values*
The void keyword, used in the previous examples, indicates that the function should not return a value. If you want the function to return a value, you can use a data type (such as int, string, etc.) 
instead of void, and use the return keyword inside the function:

Example
int myFunction(int x) {
  return 5 + x;
}

int main() {
  cout << myFunction(3);
  return 0;
}

// Outputs 8 (5 + 3)

*Pass By Reference*
In the examples from the previous page, we used normal variables when we passed parameters to a function. You can also pass a reference to the function.
This can be useful when you need to change the value of the arguments:

void swapNums(int &x, int &y) {
  int z = x;
  x = y;
  y = z;
}

int main() {
  int firstNum = 10;
  int secondNum = 20;

  cout << "Before swap: " << "\n";
  cout << firstNum << secondNum << "\n";

  // Call the function, which will change the values of firstNum and secondNum
  swapNums(firstNum, secondNum);

  cout << "After swap: " << "\n";
  cout << firstNum << secondNum << "\n";

  return 0;
}
*Pass Arrays as Function Parameters*
You can also pass arrays to a function:

void myFunction(int myNumbers[5]) {
  for (int i = 0; i < 5; i++) {
    cout << myNumbers[i] << "\n";
  }
}

int main() {
  int myNumbers[5] = {10, 20, 30, 40, 50};
  myFunction(myNumbers);
  return 0;
}

*Function Overloading*
With function overloading,
multiple functions can have the same name with different parameters:

*Forward declaration*
if the function is below the main  , you can tell the compiler about the function 
by mentioning the fn by mention the declares part , above the main

EX
void play_music(int song id);

*Call stack*
all the memory level, when you worked with the 
function

everytime when the function, function 
is pushed it in the memory called stack memory



